#!/usr/bin/env python3

from itertools import chain, combinations
import itertools
import sys
import math

# courtesy https://stackoverflow.com/a/14981125/1404966
def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def get_vals(s):
    return list(map(int, s.strip().split()))


def process(case):
    best_score = 0
    ps = []
    for (p, n) in case:
        ps.extend([p] * n)
    eprint(ps)
    for bs in itertools.product([True, False], repeat=len(ps)):

        p_sum = 0
        p_prod = 1
        for b, p in zip(bs, ps):
            if b:
                p_sum += p
            else:
                p_prod *= p
        if p_sum == p_prod:
            best_score = max(best_score, p_sum)
        # eprint(p_sum, p_prod)
    return best_score


## Comment out the appropriate option
# Option A: Multiple lines per case
num_cases = int(input())
for i in range(num_cases):
    num_distinct_primes = int(input())
    case = []
    for j in range(num_distinct_primes):
        case.append(tuple(get_vals(input())))
    print(f"Case #{i+1}: {process(case)}")

#!/usr/bin/env python3
import numpy as np


def f(x):
    return 1 / 6 * (np.log(1 + np.exp(3 - x)) - np.log(1 + np.exp(-3 - x)))


LOOKUP_START = -3
LOOKUP_END = 3
LOOKUP_SCALE = 0.005
BIG_M = 1000000
LOOKUP = np.expand_dims(
    f(np.arange(LOOKUP_START, LOOKUP_END + LOOKUP_SCALE, LOOKUP_SCALE)), axis=0
)


def finv(y):
    return (
        np.abs(np.subtract(np.expand_dims(y, axis=1), LOOKUP)).argmin(axis=1)
        * LOOKUP_SCALE
        + LOOKUP_START
    )


def get_vals(s):
    return list(map(int, s.strip().split()))


def process(case):
    p_q = np.mean(case, axis=0)
    p_s = np.mean(case, axis=1)
    q = finv(p_q)
    s = finv(1 - p_s)
    # print(p_q[2], p_s[58], q[2], s[58])
    x = np.subtract(np.expand_dims(s, axis=1), np.expand_dims(q, axis=0))
    l = -np.log(1 + np.exp(-x)) - x + np.multiply(case, x)
    l_s = np.sum(l, axis=1)
    # print(l_s[58])
    # print(l_s - BIG_M * (p_s > 0.45))
    return np.argmin(l_s - BIG_M * (p_s > 0.45)) + 1


## Comment out the appropriate option
# Option A: Multiple lines per case
num_cases = int(input())
percentage_threshold = int(input())
for i in range(num_cases):
    case = []
    for _ in range(100):
        case.append([int(x) for x in input()])
    print(f"Case #{i+1}: {process(np.array(case))}")
